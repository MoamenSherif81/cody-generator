{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Compiler_v3/overview/","title":"Overview","text":"<p>The DSL Compiler is a tool designed to make it easier to build structured web layouts using a custom Domain Specific Language (DSL). It was created as part of a larger AI-based project that generates websites from either text prompts or images.</p> <p>Instead of manually writing HTML, CSS, or using a frontend framework, developers (or AI systems) can describe UI layouts using simple and readable tags like <code>&lt;header&gt;</code>, <code>&lt;body&gt;</code>, and <code>&lt;box&gt;</code>. This DSL is then parsed and compiled into a structured format that can be converted into real web interfaces.</p>"},{"location":"Compiler_v3/overview/#what-it-does","title":"What It Does","text":"<ul> <li>Parses DSL code using a custom grammar file.</li> <li>Validates DSL syntax line by line, showing clear error messages when something is wrong.</li> <li>Builds an Abstract Syntax Tree (AST) from the DSL code.</li> <li>Provides APIs that let developers plug into the compiler and use the AST in their own systems.</li> </ul>"},{"location":"Compiler_v3/overview/#why-it-exists","title":"Why It Exists","text":"<p>The DSL Compiler was built to simplify UI generation, especially when driven by AI. Its main goal is to offer a clean, portable way to describe layouts that can then be mapped to any frontend framework \u2014 like React, Tkinter, or web technologies.</p> <p>The DSL is intentionally designed to be cross-platform, so it\u2019s not tied to any one rendering system. The AST it produces is rich with structure and values, making it ideal for integration.</p>"},{"location":"Compiler_v3/overview/#key-benefits","title":"Key Benefits","text":"<ul> <li>Easy to read and write</li> <li>Speeds up UI generation</li> <li>Cross-platform by design </li> <li>AI-friendly format for layout generation</li> <li>Exposes clean APIs for validation and AST building</li> </ul>"},{"location":"Compiler_v3/overview/#current-status","title":"Current Status","text":"<p>The compiler currently offers:</p> <ul> <li>A validation API to check DSL syntax</li> <li>An AST builder API that outputs structured data</li> </ul> <p>We have also implemented a mapper that converts the AST into HTML and CSS, allowing the DSL to directly generate functioning webpages.</p> <p>This tool exists to simplify and speed up interface development, while making it easy for other developers or systems to build on top of it.</p>"},{"location":"Compiler_v3/Developer_guide/How-to-integrate/","title":"How to Integrate","text":"<p>This guide explains how to integrate with the DSL compiler by using the AST (Abstract Syntax Tree) as the main integration point. Once you generate the AST, you can implement your own custom mapper to transform it into any target format such as HTML, React, Flutter, or desktop GUI libraries.</p>"},{"location":"Compiler_v3/Developer_guide/How-to-integrate/#integration-strategy","title":"Integration Strategy","text":"<p>The compiler is designed to be pluggable. Once the DSL code is validated and parsed, it becomes a structured tree of Python objects. You can traverse this tree and map each node (<code>ASTNode</code>) into your preferred output language or UI component.</p>"},{"location":"Compiler_v3/Developer_guide/How-to-integrate/#example-generate-the-ast-and-compile","title":"Example: Generate the AST and Compile","text":"<p>Here is a basic example using the compiler APIs:</p> <pre><code>from Compiler_V3 import validate_and_generate_ast, compile_to_web\n\n# Your DSL code string\ndsl_code = \"\"\"\nbody {\n  row {\n    box {\n      title &lt;text=\"Hello\"&gt;,\n      text &lt;content=\"Welcome to Cody\"&gt;\n    }\n  }\n}\n\"\"\"\n\n# Step 1: Validate and generate AST\nok, ast, error = validate_and_generate_ast(dsl_code)\nif not ok:\n    print(\"Error:\", error)\nelse:\n    print(\"AST Tree:\", ast)\n\n# Step 2 (optional): Compile to HTML/CSS\nhtml, css, error = compile_to_web(dsl_code)\n</code></pre>"},{"location":"Compiler_v3/Developer_guide/How-to-integrate/#ast-structure","title":"AST Structure","text":"<p>The AST is made of <code>ASTNode</code> objects. Each tag in the DSL becomes an <code>ASTNode</code> with a <code>tag</code> name, optional <code>attributes</code>, and a list of child nodes.</p>"},{"location":"Compiler_v3/Developer_guide/How-to-integrate/#astnode-class","title":"ASTNode Class","text":"<pre><code>class ASTNode:\n    def __init__(self, tag: str, children: List['ASTNode'] = None, attributes: Dict[str, Any] = None):\n        self.tag = tag  # Stores the tag name (e.g., 'row', 'box')\n        self.children = children if children is not None else []\n        self.attributes = attributes if attributes is not None else {}\n\n    def __repr__(self):\n        return f\"ASTNode(tag={self.tag}, attributes={self.attributes}, children={len(self.children)})\"\n</code></pre>"},{"location":"Compiler_v3/Developer_guide/How-to-integrate/#example-output-from-ast","title":"Example Output from AST","text":"<p>For the sample DSL code above, the AST may look like this:</p> <pre><code>[\n  ASTNode(\n    tag='body',\n    children=[\n      ASTNode(\n        tag='row',\n        children=[\n          ASTNode(\n            tag='box',\n            children=[\n              ASTNode(tag='title', attributes={'text': 'Hello'}, children=[]),\n              ASTNode(tag='text', attributes={'content': 'Welcome to Cody'}, children=[])\n            ]\n          )\n        ]\n      )\n    ]\n  )\n]\n</code></pre> <p>You can now write your own recursive function to traverse this AST and convert it to any UI format you want.</p> <p>Let us know if you need a template for a specific platform.</p>"},{"location":"Compiler_v3/Developer_guide/api/","title":"Compiler APIs","text":"<p>This page documents the main Python functions provided by the DSL compiler module. These APIs are designed for developers who want to validate, compile, or transform DSL code into web content or custom outputs.</p>"},{"location":"Compiler_v3/Developer_guide/api/#validate_dsl","title":"validate_dsl","text":"<pre><code>def validate_dsl(dsl_code: str) -&gt; Tuple[bool, Optional[str]]:\n    \"\"\"Check if DSL code is syntactically valid.\"\"\"\n</code></pre> <p>Input:</p> <ul> <li><code>dsl_code</code> (str): The DSL code to validate.</li> </ul> <p>Returns:</p> <ul> <li>Tuple: <code>(True, None)</code> if the DSL is valid.</li> <li>Tuple: <code>(False, error_message)</code> if invalid.</li> </ul> <p>Example:</p> <pre><code>is_valid, error = validate_dsl(my_code)\n</code></pre>"},{"location":"Compiler_v3/Developer_guide/api/#generate_ast","title":"generate_ast","text":"<pre><code>def generate_ast(dsl_code: str) -&gt; dict:\n    \"\"\"Generate AST from valid DSL code.\"\"\"\n</code></pre> <p>Input:</p> <ul> <li><code>dsl_code</code> (str): A valid DSL string.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary representing the AST (Abstract Syntax Tree).</li> </ul> <p>Example:</p> <pre><code>ast = generate_ast(my_code)\n</code></pre>"},{"location":"Compiler_v3/Developer_guide/api/#validate_and_generate_ast","title":"validate_and_generate_ast","text":"<pre><code>def validate_and_generate_ast(dsl_code: str) -&gt; Tuple[bool, Optional[dict], Optional[str]]:\n    \"\"\"Validate and return AST if valid, otherwise return error.\"\"\"\n</code></pre> <p>Input:</p> <ul> <li><code>dsl_code</code> (str): DSL code to check.</li> </ul> <p>Returns:</p> <ul> <li>Tuple: <code>(True, ast_dict, None)</code> if valid.</li> <li>Tuple: <code>(False, None, error_message)</code> if invalid.</li> </ul> <p>Example:</p> <pre><code>ok, ast, error = validate_and_generate_ast(my_code)\n</code></pre>"},{"location":"Compiler_v3/Developer_guide/api/#compile_to_web","title":"compile_to_web","text":"<pre><code>def compile_to_web(dsl_code: str) -&gt; Tuple[str, str, Optional[str]]:\n    \"\"\"Compile DSL to HTML and CSS output.\"\"\"\n</code></pre> <p>Input:</p> <ul> <li><code>dsl_code</code> (str): DSL layout code to render.</li> </ul> <p>Returns:</p> <ul> <li>HTML (str)</li> <li>CSS (str)</li> <li><code>None</code> if success or an error message string</li> </ul> <p>Example:</p> <pre><code>html, css, error = compile_to_web(my_code)\n</code></pre>"},{"location":"Compiler_v3/Developer_guide/api/#linter_formatter","title":"linter_formatter","text":"<pre><code>def linter_formatter(dsl_code: str) -&gt; str:\n    \"\"\"Prettify DSL code with correct indentation and commas.\"\"\"\n</code></pre> <p>Input:</p> <ul> <li><code>dsl_code</code> (str): Raw or poorly formatted DSL</li> </ul> <p>Returns:</p> <ul> <li>A cleaned DSL string with formatting applied</li> </ul> <p>Example:</p> <pre><code>formatted = linter_formatter(my_code)\n</code></pre>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/","title":"Tag Reference","text":"<p>This page lists all supported tags in the DSL language, what they do, what parameters they support, and what output they generate.</p> <p>For each tag, the parameters listed below are the officially defined ones. If you pass any additional parameters, they will automatically be treated as CSS properties and applied to the resulting element. This means you can extend any tag with your own CSS styling, using key-value pairs (e.g., <code>margin=\"10px\"</code>, <code>border=\"1px solid red\"</code>).</p>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#1-header","title":"1. <code>header</code>","text":"<p>DSL Example:</p> <pre><code>header &lt;title=\"My App\", args=[\"Menu1\", \"Menu2\"], color=\"#f0f0f0\"&gt;\n</code></pre> <p>Description: Defines the top section of the page with optional logo and navigation.</p> <p>Supported Parameters:</p> <ul> <li><code>title</code> (string)</li> <li><code>args</code> (list of strings)</li> <li><code>color</code>, <code>text_color</code>, <code>logo_color</code></li> <li>All color values should be in valid hex format (e.g., <code>#ffffff</code>)</li> </ul> <p>Expected Output: A top section that shows a logo and menu items styled with the given colors.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#2-side_nav","title":"2. <code>side_nav</code>","text":"<p>DSL Example:</p> <pre><code>side_nav &lt;title=\"Logo\", args=[\"Dashboard\", \"Settings\"]&gt;\n</code></pre> <p>Description: Adds a vertical sidebar with a logo and menu links.</p> <p>Supported Parameters:</p> <ul> <li><code>title</code> (string)</li> <li><code>args</code> (list of strings)</li> <li><code>color</code>, <code>text_color</code>, <code>logo_color</code></li> <li>All color values should be in valid hex format (e.g., <code>#ffffff</code>)</li> </ul> <p>Expected Output: A sidebar with a logo and a list of clickable navigation links.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#3-footer","title":"3. <code>footer</code>","text":"<p>DSL Example:</p> <pre><code>footer &lt;title=\"\u00a9 2025 MyApp\"&gt;\n</code></pre> <p>Description: Adds a footer to the bottom of the page.</p> <p>Supported Parameters:</p> <ul> <li><code>title</code> (string)</li> <li><code>args</code> (list of strings)</li> <li><code>color</code>, <code>text_color</code>, <code>logo_color</code></li> <li>All color values should be in valid hex format (e.g., <code>#ffffff</code>)</li> </ul> <p>Expected Output: A footer section displaying the provided title text.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#4-body","title":"4. <code>body</code>","text":"<p>DSL Example:</p> <pre><code>body {\n  row {\n    box {\n      title &lt;text=\"Welcome\"&gt;\n    }\n  }\n}\n</code></pre> <p>Description: Wraps the main layout content. Can only contain <code>row</code> tags.</p> <p>CSS Class: <code>main-content</code></p>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#5-row","title":"5. <code>row</code>","text":"<p>DSL Example:</p> <pre><code>row {\n  box {\n    title &lt;text=\"Hi\"&gt;\n  }\n}\n</code></pre> <p>Description: Represents a horizontal section inside the body. Can only contain <code>box</code> tags.</p> <p>Supported Attributes:</p> <ul> <li><code>style</code>, <code>color</code>, <code>size</code></li> </ul> <p>Expected Output: A horizontal layout segment dividing the page into boxes.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#6-box","title":"6. <code>box</code>","text":"<p>DSL Example:</p> <pre><code>box {\n  title &lt;text=\"Header\"&gt;,\n  text &lt;content=\"Description\"&gt;\n}\n</code></pre> <p>Description: Basic container for content. Can only contain leaf tags like <code>title</code>, <code>text</code>, <code>image</code>.</p> <p>Supported Attributes:</p> <ul> <li><code>color</code> (used as background)</li> </ul> <p>Expected Output: A content block that groups leaf elements together.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#7-title","title":"7. <code>title</code>","text":"<p>DSL Example:</p> <pre><code>title &lt;text=\"Main Title\", color=\"blue\", size=\"20px\"&gt;\n</code></pre> <p>Description: Displays a bold or emphasized title in a box.</p> <p>Supported Attributes:</p> <ul> <li><code>text</code> (required)</li> <li><code>color</code>, <code>size</code></li> </ul>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#8-text","title":"8. <code>text</code>","text":"<p>DSL Example:</p> <pre><code>text &lt;content=\"Body paragraph here.\", color=\"#222\", size=\"14px\"&gt;\n</code></pre> <p>Description: Displays a normal paragraph or descriptive line.</p> <p>Supported Attributes:</p> <ul> <li><code>content</code> (required)</li> <li><code>color</code>, <code>size</code></li> </ul>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#9-image","title":"9. <code>image</code>","text":"<p>DSL Example:</p> <pre><code>image &lt;src=\"/path/to/img.png\", color=\"#ccc\"&gt;\n</code></pre> <p>Description: Inserts an image into the layout.</p> <p>Supported Attributes:</p> <ul> <li><code>src</code> (required)</li> <li><code>color</code>, <code>size</code></li> </ul> <p>Expected Output: An image with optional styling and sizing.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#10-button","title":"10. <code>button</code>","text":"<p>DSL Example:</p> <pre><code>button &lt;text=\"Click Me\", color=\"#333\", size=\"16px\"&gt;\n</code></pre> <p>Description: Displays an interactive button.</p> <p>Supported Attributes:</p> <ul> <li><code>text</code> (required)</li> <li><code>color</code>, <code>size</code></li> </ul> <p>Expected Output: A styled clickable button with the given text.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#11-input","title":"11. <code>input</code>","text":"<p>DSL Example:</p> <pre><code>input &lt;placeholder=\"Enter name\", color=\"#eee\"&gt;\n</code></pre> <p>Description: Displays a single-line input field.</p> <p>Supported Attributes:</p> <ul> <li><code>placeholder</code></li> <li><code>color</code></li> </ul>"},{"location":"Compiler_v3/Writing_DSL_Code/cook-book/#12-select_box","title":"12. <code>select_box</code>","text":"<p>DSL Example:</p> <pre><code>select_box &lt;options=[\"A\", \"B\", \"C\"]&gt;\n</code></pre> <p>Description: A dropdown list with selectable options.</p> <p>Supported Attributes:</p> <ul> <li><code>options</code> (list of strings)</li> <li><code>color</code></li> </ul> <p>Expected Output: A select menu with provided choices.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/","title":"Tag Reference","text":"<p>This page lists all supported tags in the DSL language, what they do, what parameters they support, and what output they generate.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#1-header","title":"1. <code>header</code>","text":"<p>DSL Example:</p> <pre><code>header &lt;title=\"My App\", args=[\"Menu1\", \"Menu2\"], color=\"#f0f0f0\"&gt;\n</code></pre> <p>Description: Defines the top section of the page with optional logo and navigation.</p> <p>Supported Parameters:</p> <ul> <li><code>title</code> (string)</li> <li><code>args</code> (list of strings)</li> <li><code>color</code>, <code>text_color</code>, <code>logo_color</code></li> <li>All color values should be in valid hex format (e.g., <code>#ffffff</code>)</li> </ul> <p>Expected Output: A top section that shows a logo and menu items styled with the given colors.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#2-side_nav","title":"2. <code>side_nav</code>","text":"<p>DSL Example:</p> <pre><code>side_nav &lt;title=\"Logo\", args=[\"Dashboard\", \"Settings\"]&gt;\n</code></pre> <p>Description: Adds a vertical sidebar with a logo and menu links.</p> <p>Supported Parameters:</p> <ul> <li><code>title</code> (string)</li> <li><code>args</code> (list of strings)</li> <li><code>color</code>, <code>text_color</code>, <code>logo_color</code></li> </ul> <p>Expected Output: A sidebar with a logo and a list of clickable navigation links.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#3-footer","title":"3. <code>footer</code>","text":"<p>DSL Example:</p> <pre><code>footer &lt;title=\"\u00a9 2025 MyApp\"&gt;\n</code></pre> <p>Description: Adds a footer to the bottom of the page.</p> <p>Supported Parameters:</p> <ul> <li><code>title</code> (string)</li> <li><code>args</code> (list of strings)</li> <li><code>color</code>, <code>text_color</code>, <code>logo_color</code></li> <li>All color values should be in valid hex format (e.g., <code>#ffffff</code>)</li> </ul> <p>Expected Output: A footer section displaying the provided title text.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#4-body","title":"4. <code>body</code>","text":"<p>DSL Example:</p> <pre><code>body {\n  row {\n    box {\n      title &lt;text=\"Welcome\"&gt;\n    }\n  }\n}\n</code></pre> <p>Description: Wraps the main layout content. Can only contain <code>row</code> tags.</p> <p>CSS Class: <code>main-content</code></p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#5-row","title":"5. <code>row</code>","text":"<p>DSL Example:</p> <pre><code>row {\n  box {\n    title &lt;text=\"Hi\"&gt;\n  }\n}\n</code></pre> <p>Description: Represents a horizontal section inside the body. Can only contain <code>box</code> tags.</p> <p>Supported Attributes:</p> <ul> <li><code>style</code>, <code>color</code>, <code>size</code></li> </ul> <p>Expected Output: A horizontal layout segment dividing the page into boxes.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#6-box","title":"6. <code>box</code>","text":"<p>DSL Example:</p> <pre><code>box {\n  title &lt;text=\"Header\"&gt;,\n  text &lt;content=\"Description\"&gt;\n}\n</code></pre> <p>Description: Basic container for content. Can only contain leaf tags like <code>title</code>, <code>text</code>, <code>image</code>.</p> <p>Supported Attributes:</p> <ul> <li><code>color</code> (used as background)</li> </ul> <p>Expected Output: A content block that groups leaf elements together.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#7-title","title":"7. <code>title</code>","text":"<p>DSL Example:</p> <pre><code>title &lt;text=\"Main Title\", color=\"blue\", size=\"20px\"&gt;\n</code></pre> <p>Description: Displays a bold or emphasized title in a box.</p> <p>Supported Attributes:</p> <ul> <li><code>text</code> (required)</li> <li><code>color</code>, <code>size</code></li> </ul>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#8-text","title":"8. <code>text</code>","text":"<p>DSL Example:</p> <pre><code>text &lt;content=\"Body paragraph here.\", color=\"#222\", size=\"14px\"&gt;\n</code></pre> <p>Description: Displays a normal paragraph or descriptive line.</p> <p>Supported Attributes:</p> <ul> <li><code>content</code> (required)</li> <li><code>color</code>, <code>size</code></li> </ul>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#9-image","title":"9. <code>image</code>","text":"<p>DSL Example:</p> <pre><code>image &lt;src=\"/path/to/img.png\", color=\"#ccc\"&gt;\n</code></pre> <p>Description: Inserts an image into the layout.</p> <p>Supported Attributes:</p> <ul> <li><code>src</code> (required)</li> <li><code>color</code>, <code>size</code></li> </ul> <p>Expected Output: An image with optional styling and sizing.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#10-button","title":"10. <code>button</code>","text":"<p>DSL Example:</p> <pre><code>button &lt;text=\"Click Me\", color=\"#333\", size=\"16px\"&gt;\n</code></pre> <p>Description: Displays an interactive button.</p> <p>Supported Attributes:</p> <ul> <li><code>text</code> (required)</li> <li><code>color</code>, <code>size</code></li> </ul> <p>Expected Output: A styled clickable button with the given text.</p>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#11-input","title":"11. <code>input</code>","text":"<p>DSL Example:</p> <pre><code>input &lt;placeholder=\"Enter name\", color=\"#eee\"&gt;\n</code></pre> <p>Description: Displays a single-line input field.</p> <p>Supported Attributes:</p> <ul> <li><code>placeholder</code></li> <li><code>color</code></li> </ul>"},{"location":"Compiler_v3/Writing_DSL_Code/tags/#12-select_box","title":"12. <code>select_box</code>","text":"<p>DSL Example:</p> <pre><code>select_box &lt;options=[\"A\", \"B\", \"C\"]&gt;\n</code></pre> <p>Description: A dropdown list with selectable options.</p> <p>Supported Attributes:</p> <ul> <li><code>options</code> (list of strings)</li> <li><code>color</code></li> </ul> <p>Expected Output: A select menu with provided choices.</p>"}]}